# containerized: "docker://aurelia01/XXX:YYY"
configfile: "config/config.yml"
include: "rules/genome_assembly.smk"
include: "rules/softmask.smk"
include: "rules/gene_prediction.smk"

import os
import glob
sample = glob.glob("raw_data/*.hifi_reads.bam")
if len(sample) == 0:
    raise RuntimeError("No HiFi read files matching 'raw_data/*.hifi_reads.bam' were found. Please check the input directory.")
elif len(sample) > 1:
    raise RuntimeError("Multiple HiFi read files found. Please ensure only one HiFi read file is present in 'raw_data/'.")
sample_id = os.path.basename(sample[0]).replace(".hifi_reads.bam", "")

rule all:
    input:
        f"results/hifi_reads/smudgeplot/{sample_id}_masked_errors_smu.txt",
        f"results/hifi_reads/genomescope2/{sample_id}_linear_plot.png",
        f"results/fcs_gx/seqkit/{sample_id}_seqkit_stats.txt",
        f"results/fcs_gx/busco_genome/BUSCO_{sample_id}.asm.bp.p_ctg.fa/",
        f"results/fcs_gx/merqury/{sample_id}.merqury.qv",
        f"results/fcs_gx/inspector/{sample_id}/",
        f"results/fcs_gx/lai/{sample_id}.fa.out.LAI",
        f"results/repeatmasker/dfam/dfam_info.txt",
        f"results/repeatmasker/dfam/dfam_repeat_number_{config['dfam_lineage_name']}.txt",
        f"results/repeatmasker/{sample_id}_softmasked_percentage.txt",
        f"results/braker3/{sample_id}/braker3.gff3"
